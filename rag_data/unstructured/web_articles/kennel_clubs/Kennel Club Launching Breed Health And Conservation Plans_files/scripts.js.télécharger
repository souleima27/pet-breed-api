"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Helper = /*#__PURE__*/function () {
  function Helper() {
    _classCallCheck(this, Helper);
  }

  _createClass(Helper, null, [{
    key: "RandomGuid",
    value:
    /**
     * Makes a GUID
     * No guarantee of uniqueness. Not compliant with RFC4122.
     */
    function RandomGuid() {
      function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      }

      return "".concat(s4()).concat(s4(), "-").concat(s4(), "-").concat(s4(), "-").concat(s4(), "-").concat(s4()).concat(s4()).concat(s4());
    }
    /**
     * Constructs a matchMedia query, like the mq() Sass mixin.
     * Keep this aligned with the project settings, please.
     */

  }, {
    key: "MQ",
    value: function MQ(min) {
      var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var breakpoints = {
        mercury: 420,
        venus: 600,
        earth: 760,
        mars: 1020,
        jupiter: 1140,
        saturn: 1280,
        uranus: 1440,
        neptune: 1600
      };
      var mediaQuery = '';

      if (min) {
        mediaQuery += "(min-width: ".concat(breakpoints[min], "px)");
      }

      if (max) {
        if (min) {
          mediaQuery += ' and ';
        }

        mediaQuery += "(max-width: ".concat(breakpoints[max] - 1, "px)");
      }

      return window.matchMedia(mediaQuery);
    }
    /**
     * Detect if the browser has opened the print dialog and run some code
     * before/after it.
     */

  }, {
    key: "BeingPrinted",
    value: function BeingPrinted(beforePrint, afterPrint) {
      beforePrint = beforePrint || function () {};

      afterPrint = afterPrint || function () {};

      window.onbeforeprint = beforePrint;
      window.onafterprint = afterPrint;
      window.matchMedia('print').addListener(function (mql) {
        if (mql.matches) {
          beforePrint();
        } else {
          afterPrint();
        }
      });
    }
    /**
     * Turns a string into a alphanumeric, human-readable string. 
     */

  }, {
    key: "Slugify",
    value: function Slugify(s) {
      var divider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';
      s = s.replace(/[^\w\s]/g, ''); // remove punctuation

      s = s.replace(/\s\s+/g, ' '); // collapse consecutive spaces (ugly)

      s = s.replace(/ /g, divider); // replace spaces with divider char

      return s.toLowerCase();
    }
  }, {
    key: "Currency",
    value: function Currency(input) {
      var sign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '£';
      var digitsRegex = /(\d{3})(?=\d)/g;

      if (input == null || !isFinite(input)) {
        throw new Error('input needs to be a number');
      }

      input = parseFloat(input);
      var strVal = Math.floor(Math.abs(input)).toString();
      var mod = strVal.length % 3;
      var h = mod > 0 ? strVal.slice(0, mod) + (strVal.length > 3 ? ',' : '') : '';
      var v = Math.abs(parseInt(input * 100 % 100, 10));
      var float = '.' + (v < 10 ? '0' + v : v);
      return (input < 0 ? '-' : '') + sign + h + strVal.slice(mod).replace(digitsRegex, '$1,') + float;
    }
  }]);

  return Helper;
}();

Helper.Cookie = /*#__PURE__*/function () {
  function _class() {
    _classCallCheck(this, _class);
  }

  _createClass(_class, null, [{
    key: "Set",
    value:
    /**
     * Cookie manipulation.
     * Hat tip to jac. https://stackoverflow.com/a/5968306
     * And Pikkio. https://stackoverflow.com/a/47305680
     */
    function Set(name, value, days) {
      var expiryDate = new Date(new Date().getTime() + days * 24 * 60 * 60 * 1000);
      document.cookie = name + "=" + value + ";path=/;expires=" + expiryDate.toUTCString();
    }
  }, {
    key: "Get",
    value: function Get(name) {
      var dc = document.cookie;
      var prefix = "".concat(name, "=");
      var begin = dc.indexOf("; ".concat(prefix));
      var end = dc.length;

      if (begin !== -1) {
        begin += 2;
      } else {
        begin = dc.indexOf(prefix);

        if (begin === -1 || begin !== 0) {
          return null;
        }
      }

      if (dc.indexOf(';', begin) !== 1) {
        end = dc.indexOf(';', begin);
      }

      return decodeURI(dc.substring(begin + prefix.length, end));
    }
  }, {
    key: "Destroy",
    value: function Destroy(name) {
      Helper.Cookie.Set(name, '', -1);
    }
  }]);

  return _class;
}();

Helper.Focus = /*#__PURE__*/function () {
  function _class2() {
    _classCallCheck(this, _class2);
  }

  _createClass(_class2, null, [{
    key: "Move",
    value:
    /**
     * Focus management. Moving and trapping.
     * Hat tip to Hidde. https://hiddedevries.nl/en/blog/2017-01-29-using-javascript-to-trap-focus-in-an-element
     */
    function Move($element) {
      var goInside = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (goInside) {
        $element.find('a, object, :input, iframe, [tabindex]').eq(0).trigger('focus');
      } else {
        $element.attr('tabindex', '0').on('blur', function () {
          $element.removeAttr('tabindex');
        }).trigger('focus');
      }
    }
  }, {
    key: "Trap",
    value: function Trap($element, namespace) {
      Helper.Focus.Release($element, namespace); // remove any existing focus trap

      var $focusableElements = $element.find('a, object, :input, iframe, [tabindex]');
      var firstFocusable = $focusableElements.first().get(0);
      var lastFocusable = $focusableElements.last().get(0);
      $element.on("keydown.".concat(namespace), function (e) {
        if (e.which !== 9) {
          return;
        }

        if (e.shiftKey) {
          if (document.activeElement === firstFocusable) {
            lastFocusable.focus();
            e.preventDefault();
          }
        } else {
          if (document.activeElement === lastFocusable) {
            firstFocusable.focus();
            e.preventDefault();
          }
        }
      });
    }
  }, {
    key: "Release",
    value: function Release($element, namespace) {
      $element.off("keydown.".concat(namespace));
    }
  }]);

  return _class2;
}();

Helper.Position = /*#__PURE__*/function () {
  function _class3() {
    _classCallCheck(this, _class3);
  }

  _createClass(_class3, null, [{
    key: "Coords",
    value:
    /**
     * Takes in a JQuery Object and returns some useful size/position
     * information. 'document' coords are relative to the page as a whole (e.g. 
     * from the top of the header to bottom of the footer), 'viewport' coords
     * are relative to the users browser window. 
     *
     * Property names are based on this graph. 
     * T = top, R = right, B = bottom, L = left, O = origin, M = maximum
     *
     *  O      L      R      M
     * O┏━━━━━━━━━━━━━━━━━━━━┓
     *  ┃      ╎      ╎      ┃
     * T┃╌╌╌╌╌╌┌──────┐╌╌╌╌╌╌┃
     *  ┃      │      │      ┃
     * B┃╌╌╌╌╌╌└──────┘╌╌╌╌╌╌┃
     *  ┃      ╎      ╎      ┃
     * M┗━━━━━━━━━━━━━━━━━━━━┛
     *
     * e.g. The value of line OT is equal to the distance of horizontal line O 
     * to line T; the value of OR is equal to the distance from the vertical 
     * line O to line R; etc.
     *
     */
    function Coords($element) {
      var boundingBox = $element.get(0).getBoundingClientRect();
      var element = {
        width: $element.outerWidth(),
        height: $element.outerHeight()
      };
      var win = {
        scrollLeft: $(window).scrollLeft(),
        scrollTop: $(window).scrollTop(),
        width: $(window).innerWidth(),
        height: $(window).innerHeight()
      };
      return {
        width: element.width,
        height: element.height,
        inViewport: boundingBox.bottom > 0 && boundingBox.right > 0 && boundingBox.left < win.width && boundingBox.top < win.height ? true : false,
        document: {
          OL: boundingBox.left + win.scrollLeft,
          OR: boundingBox.left + win.scrollLeft + element.width,
          OT: boundingBox.top + win.scrollTop,
          OB: boundingBox.top + win.scrollTop + element.height,
          ML: win.width - (boundingBox.left + win.scrollLeft),
          MR: win.width - (boundingBox.left + win.scrollLeft + element.width),
          MT: win.height - (boundingBox.top + win.scrollTop),
          MB: win.height - (boundingBox.top + win.scrollTop + element.height)
        },
        viewport: {
          OL: boundingBox.left,
          OR: boundingBox.right,
          OT: boundingBox.top,
          OB: boundingBox.bottom,
          ML: win.width - boundingBox.left,
          MR: win.width - boundingBox.right,
          MT: win.height - boundingBox.top,
          MB: win.height - boundingBox.bottom
        }
      };
    }
  }]);

  return _class3;
}();

Helper.Backdrop = /*#__PURE__*/function () {
  function _class4() {
    _classCallCheck(this, _class4);
  }

  _createClass(_class4, null, [{
    key: "Show",
    value:
    /**
     * Show overlay.
     * Takes an object of parameters, including:
     *   id — Creates an individual backdrop instance, allowing for multiple to be used at once.
     *   mods — An array of display modifiers.
     *   callback — A callback that is ran as soon as the overlay is shown.
     *   onClick — Runs a function if the overlay is clicked. This is only bound once, and is unbound after the first click.
     */
    function Show() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // Extend options object
      var defaults = {
        id: '',
        mods: [],
        callback: false,
        onClick: false
      };
      var options = $.extend(true, {}, defaults, settings); // Create array of classes to apply 

      options.mods = options.mods.map(function (mod) {
        return "u-backdrop--".concat(mod);
      }); // Get the backdrop

      var $backdrop = $('[data-backdrop]:not([id])');

      if (options.id) {
        $backdrop = $("#backdrop-".concat(options.id));
      }

      var classList = ['u-backdrop'].concat(options.mods); // If the backdrop element already exists, bind onClick and just show it

      if ($backdrop.length > 0) {
        $backdrop.attr('class', classList.join(' ')).addClass('is-fadein').one('click', options.onClick).removeAttr('hidden');
        setTimeout(function () {
          $backdrop.removeClass('is-fadein');
        }, 500); // ms, aligned to CSS duration
      } // If it doesn't exist, create it and append it to DOM
      else {
        var $newBackdrop = $('<div/>', {
          'class': "".concat(classList.join(' '), " is-fadein"),
          'aria-hidden': 'true',
          'data-backdrop': ''
        }).one('click', options.onClick);

        if (options.id) {
          $newBackdrop.attr('id', "backdrop-".concat(options.id));
        }

        $('body').append($newBackdrop);
        setTimeout(function () {
          $newBackdrop.removeClass('is-fadein');
        }, 500); // ms, aligned to CSS duration
      } // Allow pressing of ESC to also fire onClick callback


      if (options.onClick && typeof options.onClick === 'function') {
        $(document).on('keydown.backdrop', function (e) {
          if (e.key === "Escape") {
            options.onClick();
          }
        });
      } // Fire callback


      if (typeof options.callback === 'function') {
        options.callback();
      }
    }
    /**
     * Hide overlay.
     * Takes an object of parameters, including:
     *   id — Creates an individual backdrop instance, allowing for multiple to be used at once.
     *   callback — A callback that is ran as soon as the overlay is hidden.
     */

  }, {
    key: "Hide",
    value: function Hide() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // Get the backdrop
      var $backdrop = $('[data-backdrop]:not([id])');

      if (options.id) {
        $backdrop = $("#backdrop-".concat(options.id));
      } // Only run if it needs hiding


      if ($backdrop.is(':visible')) {
        // Extend options object
        options = $.extend(true, {}, {
          callback: false
        }, options); // Unbind any existing ESC control so it doesn't keep running when the backdrop is closed

        $(document).off('keydown.backdrop'); // Hide the backdrop element

        $backdrop.addClass('is-fadeout');
        setTimeout(function () {
          $backdrop.attr('hidden', 'hidden').removeClass('is-fadeout');
        }, 500); // ms, aligned to CSS duration
        // Fire callback

        if (typeof options.callback === 'function') {
          options.callback();
        }
      }
    }
  }]);

  return _class4;
}();

Helper.Scroll = /*#__PURE__*/function () {
  function _class5($exception) {
    _classCallCheck(this, _class5);

    this.$exception = $exception;
    window.neverDoThisEver = {};
    window.neverDoThisEver.$exception = $exception; // This is terrible practice, but for the life of me I couldn't find out how to make this variable accessible within the `freeze` method.

    this.functionToBindTo = function () {}; // $(document).on('touchmove', () => { console.log('detecting touchmove'); });

  }

  _createClass(_class5, [{
    key: "freeze",
    value: function freeze(e) {
      if (!window.neverDoThisEver.$exception.get(0).contains(e.target)) {
        e.preventDefault();
      }
    }
  }, {
    key: "disable",
    value: function disable() {
      var _this = this;

      $('html').css({
        'overflow': 'hidden'
      }); // $(document).on('touchmove', e => { this.freeze(e, this.$exception); });

      document.addEventListener('touchmove', this.freeze, {
        passive: false
      });
      this.$exception.on('touchmove.navigation', function (e) {
        var top = _this.$exception.scrollTop();

        var totalScroll = _this.$exception.prop('scrollHeight');

        var currentScroll = top + _this.$exception.prop('offsetHeight');

        if (top === 0 && currentScroll === totalScroll) {
          e.preventDefault();
        } else if (top === 0) {
          _this.$exception.scrollTop(1);
        } else if (currentScroll === totalScroll) {
          _this.$exception.scrollTop(top - 1);
        }
      });
    }
  }, {
    key: "enable",
    value: function enable() {
      $('html').css({
        'overflow': ''
      });
      document.removeEventListener('touchmove', this.freeze, {
        passive: false
      }); // $(document).off('touchmove', e => { this.freeze(e, this.$exception); });
    }
  }]);

  return _class5;
}();

var AddressForm = /*#__PURE__*/function () {
  function AddressForm() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AddressForm);

    var defaults = {
      debug: false,
      vueContainer: ""
    };
    this.settings = $.extend(true, {}, defaults, options);

    if (!this.settings.vueContainer) {
      return;
    }

    this.$container = $(this.settings.vueContainer); // Give the container an ID

    this.id = this.$container.attr("id");

    if (!this.id) {
      this.id = "AddressForm-".concat(Helper.RandomGuid());
      this.$container.attr("id", this.id);
    } // Init things


    this.getVue();
  }

  _createClass(AddressForm, [{
    key: "getVue",
    value: function getVue() {
      var _this2 = this;

      if (window.Vue) {
        this.initAddressForm();
        return;
      }

      $.when($.getScript(this.settings.debug ? "https://cdn.jsdelivr.net/npm/vue/dist/vue.js" : "https://cdn.jsdelivr.net/npm/vue"), $.Deferred(function (deferred) {
        $(deferred.resolve);
      })).done(function () {
        _this2.initAddressForm();
      });
    }
  }, {
    key: "initAddressForm",
    value: function initAddressForm() {
      var antiForgeryToken = this.$container.closest("form").find('[name="__RequestVerificationToken"]').val();
      var prepopulatedValues = {
        postalCode: this.$container.find('[autocomplete="postal-code"]').val(),
        addressLine1: this.$container.find('[autocomplete="address-line1"]').val(),
        addressLine2: this.$container.find('[autocomplete="address-line2"]').val(),
        addressLine3: this.$container.find('[autocomplete="address-line3"]').val(),
        administrativeLevel1: this.$container.find('[autocomplete="address-level1"]').val(),
        administrativeLevel2: this.$container.find('[autocomplete="address-level2"]').val(),
        usaState: this.$container.find('[autocomplete="address-state"]').val(),
        country: this.$container.find('[autocomplete="address-country"]').val()
      };
      var addressLookup = new Vue({
        el: "#".concat(this.id),
        delimiters: ["<%", "%>"],
        mounted: function mounted() {
          this.prepopulateFields();
          this.state.initialized = true;
        },
        data: {
          state: {
            initialized: false,
            loading: false,
            showOptions: false,
            showFields: false
          },
          searchQuery: "",
          errorMessage: "",
          lookupResults: [],
          selectedAddressId: "",
          selectedAddress: {
            postalCode: "",
            addressLine1: "",
            addressLine2: "",
            addressLine3: "",
            administrativeLevel2: "",
            administrativeLevel1: "",
            usaState: "",
            country: ""
          }
        },
        computed: {},
        methods: {
          prepopulateFields: function prepopulateFields() {
            this.selectedAddress = {
              postalCode: prepopulatedValues.postalCode || "",
              addressLine1: prepopulatedValues.addressLine1 || "",
              addressLine2: prepopulatedValues.addressLine2 || "",
              addressLine3: prepopulatedValues.addressLine3 || "",
              administrativeLevel2: prepopulatedValues.administrativeLevel2 || "",
              administrativeLevel1: prepopulatedValues.administrativeLevel1 || "",
              usaState: prepopulatedValues.usaState || "",
              country: prepopulatedValues.country || ""
            }; // If any of the above are populated, show the fields immediately

            if (prepopulatedValues.postalCode || prepopulatedValues.addressLine1 || prepopulatedValues.addressLine2 || prepopulatedValues.addressLine3 || prepopulatedValues.administrativeLevel2 || prepopulatedValues.administrativeLevel1 || prepopulatedValues.usaState || prepopulatedValues.addressCountry) {
              this.state.showFields = true;
            }
          },
          lookupPostcode: function lookupPostcode() {
            var _this3 = this;

            this.state.loading = true;
            this.state.showFields = false;
            $.ajax({
              url: "/umbraco/Surface/AddressFinder/FindByPostcode",
              method: "POST",
              dataType: "JSON",
              data: {
                postcode: this.searchQuery,
                __RequestVerificationToken: antiForgeryToken
              }
            }).done(function (data) {
              _this3.lookupResults = data.Addresses;
              _this3.state.showOptions = true;
            }).fail(function (jqXHR, textStatus, errorThrown) {
              _this3.errorMessage = errorThrown || "An unknown error occurred.";
            }).always(function () {
              _this3.state.loading = false;
            });
          },
          resetForm: function resetForm() {
            this.selectedAddress = {
              postalCode: "",
              addressLine1: "",
              addressLine2: "",
              addressLine3: "",
              administrativeLevel2: "",
              administrativeLevel1: "",
              usaState: "",
              country: ""
            };
          }
        },
        watch: {
          selectedAddressId: function selectedAddressId() {
            var _this4 = this;

            if (!this.selectedAddressId) {
              // If the user has selected the blank option, reset the fields
              this.resetFields();
              this.state.showFields = false;
              return;
            }

            this.state.loading = true;
            $.ajax({
              url: "/umbraco/Surface/AddressFinder/GetAddressDetails",
              method: "POST",
              dataType: "JSON",
              data: {
                addressId: this.selectedAddressId,
                __RequestVerificationToken: antiForgeryToken
              }
            }).done(function (data) {
              var addressResult = data;
              _this4.selectedAddress = {
                postalCode: addressResult.PostCode,
                addressLine1: addressResult.Line1,
                addressLine2: addressResult.Line2,
                addressLine3: addressResult.Line3,
                administrativeLevel2: addressResult.City,
                administrativeLevel1: addressResult.Province,
                usaState: addressResult.Province,
                country: addressResult.CountryName
              };
              _this4.state.showFields = true;
            }).fail(function (jqXHR, textStatus, errorThrown) {
              _this4.errorMessage = errorThrown || "An unknown error occurred.";
            }).always(function () {
              _this4.state.loading = false;
            });
          }
        }
      });
    }
  }]);

  return AddressForm;
}();

var Assessment = /*#__PURE__*/function () {
  function Assessment() {
    _classCallCheck(this, Assessment);
  }

  _createClass(Assessment, null, [{
    key: "timeRemaining",
    value: function timeRemaining(timer) {
      // Time constants
      var SECOND = 1000;
      var MINUTE = SECOND * 60;
      var HOUR = MINUTE * 60; // Handle the existence of timezones

      var $timer = $(timer);
      var endTimeUTC = new Date($timer.attr('datetime'));
      var timezoneOffset = new Date().getTimezoneOffset();
      var endTimeLocal = new Date(endTimeUTC.setMinutes(endTimeUTC.getMinutes() - timezoneOffset)); // Start the clock

      var timerInterval = setInterval(function () {
        $timer.text(formatTimer(updateTimer()));
      }, 1000);

      function updateTimer() {
        var now = new Date();
        var difference = endTimeLocal - now; // Kill timer when time has run out

        if (difference < 0) {
          clearInterval(timerInterval);
          $timer.text('00:00');
          return;
        }

        return {
          hours: Math.floor(difference / HOUR),
          minutes: Math.floor(difference % HOUR / MINUTE),
          seconds: Math.floor(difference % MINUTE / SECOND)
        };
      } // Formatting helper


      function formatTimer(timeRemaining) {
        var formattedString = '';

        if (timeRemaining.hours) {
          formattedString += "".concat(timeRemaining.hours, ":");
        }

        formattedString += "".concat(String(timeRemaining.minutes).padStart(2, '0'), ":").concat(String(timeRemaining.seconds).padStart(2, '0'));
        return formattedString;
      }
    }
  }, {
    key: "confetti",
    value: function confetti(canvasSelector) {
      // Set up
      var settings = {
        minSize: 8,
        particleLimit: 150,
        confettiColors: ['#006954', '#a3e953', '#f1ede7']
      };
      var canvas = document.querySelector(canvasSelector);
      var ctx = canvas.getContext('2d');
      var items = [];
      var startTime = new Date().getTime();
      var currentTime = startTime;
      var width, height; // Start the things

      calcSize();
      $(window).on('resize', calcSize);
      render(); // Calculate responsive dimensions

      function calcSize() {
        width = canvas.width = canvas.scrollWidth;
        height = canvas.height = canvas.scrollHeight;
      } // Particle


      function particle(x, y, i, minv) {
        var angle = Math.random() * (Math.PI * 2);
        var amount = Math.random() * 15.0 + minv;
        var vx = Math.sin(angle) * amount;
        var vy = Math.cos(angle) * amount;
        return {
          x: x,
          y: y,
          vx: vx,
          vy: vy,
          width: Math.random() * 15 + settings.minSize,
          height: Math.random() * 20 + settings.minSize,
          color: settings.confettiColors[i % settings.confettiColors.length],
          circle: Math.random() > .8,
          rotate: Math.random() * 180,
          direction: Math.random() * 5 - 2.5,
          fallSpeed: Math.random() / 10 + .1
        };
      } // Render loop


      function render() {
        ctx.clearRect(0, 0, width, height);
        var time = new Date().getTime();
        var delta = (time - currentTime) / (1000 / 60);
        currentTime = time;

        if (time - startTime > 1500) {
          items[++settings.particleLimit % 600] = particle(Math.random() * width, -20, settings.particleLimit, 10);
        }

        items.forEach(function (item) {
          item.vx *= 1.0 - 0.05 * delta;
          item.vy += delta * item.fallSpeed;
          item.vy /= 1.0 + 0.05 * delta;
          item.x += delta * item.vx;
          item.y += delta * item.vy;
          item.rotate += delta * item.direction;
          ctx.fillStyle = item.color;

          if (item.circle) {
            ctx.beginPath();
            ctx.arc(item.x, item.y, item.width / 2, 0, 2 * Math.PI);
            ctx.fill();
            ctx.closePath();
          } else {
            ctx.save();
            ctx.beginPath();
            ctx.translate(item.x, item.y);
            ctx.rotate(item.rotate * Math.PI / 180);
            ctx.fillRect(-item.width / 2, -item.height / 2, item.width, item.height);
            ctx.translate(-item.x, -item.y);
            ctx.restore();
            ctx.closePath();
          }
        });
        window.requestAnimationFrame(render);
      }
    }
  }]);

  return Assessment;
}();

var CardForm = function CardForm(numberInput, cscInput) {
  var _this5 = this;

  _classCallCheck(this, CardForm);

  this.$numberInput = $(numberInput);
  this.$cscInput = $(cscInput);

  if (!this.$numberInput.length || !this.$cscInput.length) {
    return;
  }

  this.cardRules = {
    visa: {
      displayName: 'Visa',
      cssName: 'visa',
      cscLength: 3
    },
    mastercard: {
      displayName: 'Mastercard',
      cssName: 'mastercard',
      cscLength: 3
    },
    amex: {
      displayName: 'American Express',
      cssName: 'amex',
      cscLength: 4
    },
    maestro: {
      displayName: 'Maestro',
      cssName: 'maestro',
      cscLength: 3
    },
    discover: {
      displayName: 'Discover',
      cssName: 'discover',
      cscLength: 3
    },
    diners: {
      displayName: 'Diners Club',
      cssName: 'diners-club',
      cscLength: 3
    },
    jcb: {
      displayName: 'JCB',
      cssName: 'jcb',
      cscLength: 3
    }
  }; // Init input mask

  this.cardNumberMask = new Cleave(this.$numberInput.get(0), {
    creditCard: true,
    creditCardStrictMode: true,
    onCreditCardTypeChanged: function onCreditCardTypeChanged(type) {
      if (type !== 'unknown') {
        var cardInfo = _this5.cardRules[type];

        _this5.$numberInput.attr('data-card', cardInfo.cssName);

        _this5.$cscInput.attr({
          'minlength': cardInfo.cscLength,
          'maxlength': cardInfo.cscLength
        });
      } else {
        _this5.$numberInput.removeAttr('data-card');

        _this5.$cscInput.attr({
          'minlength': 3,
          'maxlength': 4
        });
      }
    }
  });
};

var Carousel = function Carousel($container) {
  _classCallCheck(this, Carousel);

  this.$container = $container;
  var classPrefix = 'o-carousel';
  new Swiper($container, {
    loop: true,
    spaceBetween: 16,
    pagination: {
      el: ".".concat(classPrefix, "__pagination"),
      type: 'bullets',
      clickable: true,
      renderBullet: function renderBullet(index, className) {
        return "<button type=\"button\" class=\"".concat(className, "\">Go to slide ").concat(index + 1, "</button>");
      },
      modifierClass: "".concat(classPrefix, "__pagination--"),
      clickableClass: "".concat(classPrefix, "__pagination--clickable"),
      bulletClass: "".concat(classPrefix, "__pagination-bullet"),
      bulletActiveClass: "".concat(classPrefix, "__pagination-bullet--active")
    },
    a11y: {
      enabled: true,
      notificationClass: "".concat(classPrefix, "__status")
    },
    containerModifierClass: "".concat(classPrefix, "--"),
    wrapperClass: "".concat(classPrefix, "__wrapper"),
    slideClass: "".concat(classPrefix, "__slide"),
    slideActiveClass: "".concat(classPrefix, "__slide--active"),
    slideVisibleClass: "".concat(classPrefix, "__slide--visible"),
    slideNextClass: "".concat(classPrefix, "__slide--next"),
    slidePrevClass: "".concat(classPrefix, "__slide--prev"),
    slideDuplicateClass: "".concat(classPrefix, "__slide--duplicate"),
    slideDuplicateActiveClass: "".concat(classPrefix, "__slide--duplicate-active"),
    slideDuplicateNextClass: "".concat(classPrefix, "__slide--duplicate-next"),
    slideDuplicatePrevClass: "".concat(classPrefix, "__slide--duplicate-prev"),
    slideBlankClass: "".concat(classPrefix, "__slide--invisible-blank")
  });
};

$(function () {
  $('.o-carousel').each(function (i, element) {
    new Carousel(element);
  });
});

var CartIndicator = /*#__PURE__*/function () {
  function CartIndicator(container) {
    _classCallCheck(this, CartIndicator);

    // Back out if there's no instances of [data-cart-add] on this page.
    // There's no need for this code if there isn't. 
    if ($('[data-cart-add]').length === 0) {
      return;
    } // Setup


    this.$container = $(container);
    this.$cartCount = this.$container.find('.js-cart-item-count');
    this.itemCount = parseInt(this.$cartCount.text()); // Accessibility setup

    this.$container.attr('aria-live', 'polite');
    this.bindControls();
  }

  _createClass(CartIndicator, [{
    key: "bindControls",
    value: function bindControls() {
      var _this6 = this;

      $('[data-cart-add]').on('click', function (e) {
        var modifier = parseInt($(e.target).attr('data-cart-add'));
        _this6.itemCount += modifier;

        _this6.updateCartCount();
      });
    }
  }, {
    key: "updateCartCount",
    value: function updateCartCount() {
      var _this7 = this;

      this.createCartAnimationIcon(); // Set classes

      this.$container.addClass('a-cart-indicator--receiving-item'); // Update count 1/4th the way through 

      setTimeout(function () {
        _this7.$cartCount.text(_this7.itemCount);
      }, 500); // Return to normal after 2 seconds

      setTimeout(function () {
        _this7.$container.removeClass('a-cart-indicator--receiving-item');
      }, 2000);
    }
  }, {
    key: "createCartAnimationIcon",
    value: function createCartAnimationIcon() {}
  }]);

  return CartIndicator;
}();

$(function () {
  $('.a-cart-indicator').each(function (i, ci) {
    new CartIndicator(ci);
  });
});

var CartPreview = /*#__PURE__*/function () {
  function CartPreview() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CartPreview);

    var defaults = {
      vueContainer: '',
      items: []
    };
    this.settings = $.extend(true, {}, defaults, options);
    this.$container = $(this.settings.vueContainer);
    this.app = {}; // Give the container an ID 

    this.id = this.$container.attr('id');

    if (!this.id) {
      this.id = "CartPreview-".concat(Helper.RandomGuid());
      this.$container.attr('id', this.id);
    } // Init things


    this.getVue();
  }

  _createClass(CartPreview, [{
    key: "getVue",
    value: function getVue() {
      var _this8 = this;

      if (window.Vue) {
        this.initPseudoCart();
        return;
      }

      $.when($.getScript(this.settings.debug ? 'https://cdn.jsdelivr.net/npm/vue/dist/vue.js' : 'https://cdn.jsdelivr.net/npm/vue'), $.Deferred(function (deferred) {
        $(deferred.resolve);
      })).done(function () {
        _this8.initPseudoCart();
      });
    }
  }, {
    key: "initPseudoCart",
    value: function initPseudoCart() {
      var cartPreview = this;
      this.app = new Vue({
        el: "#".concat(this.id),
        data: {
          initialized: false,
          items: this.settings.items ? this.settings.items : []
        },
        mounted: function mounted() {
          this.initialized = true;
        },
        methods: {
          bepemethod: function bepemethod() {}
        },
        computed: {
          cartTotal: function cartTotal() {
            var total = 0;
            this.items.forEach(function (item) {
              total += item.price;
            });
            return total;
          }
        },
        filters: {
          currency: function currency(value) {
            return Helper.Currency(value);
          }
        }
      });
    }
  }, {
    key: "getCartItems",
    value: function getCartItems() {
      return this.app.items;
    }
  }, {
    key: "setCartItems",
    value: function setCartItems(newCart) {
      this.app.items = newCart;
    }
  }]);

  return CartPreview;
}();

var Details = /*#__PURE__*/function () {
  function Details(element) {
    _classCallCheck(this, Details);

    this.forceOpenForPrint(); // Back out if browser supports the <details> element natively.

    if (Modernizr.details) {
      return;
    } // Otherwise, continue!


    console.log('run');
    this.$element = $(element);
    this.$summary = this.$element.find('summary'); // Accessibility

    var id = "collapsible-".concat(Helper.RandomGuid());
    this.$element.children().not('summary').wrapAll('<div></div>');
    this.$content = this.$element.children().not('summary');
    this.$summary.attr({
      'id': "".concat(id, "-summary"),
      'aria-controls': id
    });
    this.$content.attr({
      'id': id,
      'aria-controlledby': "".concat(id, "-summary")
    }); // Initial state

    this.bindControls();

    if (!this.$element.attr('open')) {
      this.close();
    }
  }

  _createClass(Details, [{
    key: "bindControls",
    value: function bindControls() {
      var _this9 = this;

      this.$summary.on('click', function (e) {
        e.preventDefault();

        _this9.toggle();
      });
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.$element.data('collapsed') === true) {
        this.open();
        return;
      }

      this.close();
    }
  }, {
    key: "close",
    value: function close() {
      this.$element.data('collapsed', true).removeAttr('open');
      this.$content.attr({
        'aria-expanded': 'false'
      });
    }
  }, {
    key: "open",
    value: function open() {
      this.$element.data('collapsed', false).attr('open', 'open');
      this.$content.attr({
        'aria-expanded': 'true'
      });
    }
  }, {
    key: "forceOpenForPrint",
    value: function forceOpenForPrint() {
      if ($(document).data('detailsForceOpen') === true) {
        return;
      } // This detects the 'beforeprint' event and forcibly opens all of
      // the details elements, so their content can be printed


      Helper.BeingPrinted(function () {
        $('details').attr('open', 'open');
      }, function () {
        $('details').removeAttr('open');
      });
      $(document).data('detailsForceOpen', true);
    }
  }]);

  return Details;
}();

$(function () {
  $('details').each(function (i, element) {
    new Details($(element));
  });
});

var FilterableList = /*#__PURE__*/function () {
  function FilterableList() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, FilterableList);

    var defaults = {
      debug: false,
      showSectionNavigation: false,
      vueContainer: '',
      listGroupSelector: '',
      listItemSelector: ''
    };
    this.settings = $.extend(true, {}, defaults, options);
    this.$container = $(this.settings.vueContainer);
    this.app = {}; // Give the container an ID 

    this.id = this.$container.attr('id');

    if (!this.id) {
      this.id = "FilterableList-".concat(Helper.RandomGuid());
      this.$container.attr('id', this.id);
    } // Init things


    this.getVue();
  }

  _createClass(FilterableList, [{
    key: "getVue",
    value: function getVue() {
      var _this10 = this;

      if (window.Vue) {
        this.initFilterableList();
        return;
      }

      $.when($.getScript(this.settings.debug ? 'https://cdn.jsdelivr.net/npm/vue/dist/vue.js' : 'https://cdn.jsdelivr.net/npm/vue'), $.Deferred(function (deferred) {
        $(deferred.resolve);
      })).done(function () {
        _this10.initFilterableList();
      });
    }
  }, {
    key: "findSearchLabel",
    value: function findSearchLabel($element) {
      var labelText; // Look for it on the current element

      if ($element.attr('data-filterable-label')) {
        labelText = $element.attr('data-filterable-label');
      } // Look for it on a child element
      else if ($element.find('[data-filterable-label]').length > 0) {
        if ($element.find('[data-filterable-label]').eq(0).attr('data-filterable-label')) {
          labelText = $element.find('[data-filterable-label]').eq(0).attr('data-filterable-label');
        } else {
          labelText = $element.find('[data-filterable-label]').eq(0).text();
        }
      } // If all else fails, use the current element text
      else {
        labelText = $element.text();
      }

      return labelText.trim();
    }
  }, {
    key: "initFilterableList",
    value: function initFilterableList() {
      // Inside Vue, the 'this' keyword refers to the Vue instance and not the class
      // so we set up a variable that refers to the class for easy access
      var filterableList = this;
      this.app = new Vue({
        el: "#".concat(this.id),
        data: {
          initialized: false,
          showSectionNavigation: filterableList.settings.showSectionNavigation,
          listItems: [],
          searchInput: ''
        },
        mounted: function mounted() {
          var _this11 = this;

          filterableList.$container.find(filterableList.settings.listGroupSelector).not("template ".concat(filterableList.settings.listGroupSelector)).each(function (i, group) {
            var $group = $(group);
            var groupObject = {
              label: filterableList.findSearchLabel($group),
              items: []
            };
            $group.find(filterableList.settings.listItemSelector).each(function (j, listItem) {
              var $listItem = $(listItem);
              groupObject.items.push({
                label: filterableList.findSearchLabel($listItem),
                html: $listItem.get(0).outerHTML
              });
            });

            _this11.listItems.push(groupObject);
          });
          this.initialized = true;
        },
        methods: {
          filterByQuery: function filterByQuery(options, query) {
            var filterResults = [];
            options.forEach(function (group) {
              var groupObject = {
                label: group.label,
                items: group.items.filter(function (item) {
                  return item.label.toLowerCase().indexOf(query.toLowerCase()) >= 0;
                })
              };
              filterResults.push(groupObject);
            });
            return filterResults;
          }
        },
        computed: {
          filteredOptions: function filteredOptions() {
            return this.filterByQuery(this.listItems, this.searchInput);
          },
          noOfResults: function noOfResults() {
            var noOfResults = 0;
            var resultList = this.filterByQuery(this.listItems, this.searchInput);
            resultList.forEach(function (group) {
              noOfResults += group.items.length;
            });
            return noOfResults;
          }
        },
        filters: {
          slugify: function slugify(value) {
            return Helper.Slugify(value);
          },
          id: function id(value) {
            return "#".concat(value);
          }
        }
      });
    }
  }]);

  return FilterableList;
}();

var Footnote = /*#__PURE__*/function () {
  function Footnote(footnote, referenceNumber) {
    _classCallCheck(this, Footnote);

    this.$footnote = $(footnote);
    this.referenceNumber = referenceNumber;
    this.content = this.$footnote.html();
    this.replaceInnards();
    this.bindControls();
  }

  _createClass(Footnote, [{
    key: "replaceInnards",
    value: function replaceInnards() {
      var $label = $('<label/>', {
        'class': 'm-footnote__num',
        'html': "<sup>[".concat(this.referenceNumber, "]</sup>"),
        'for': "ref-".concat(this.referenceNumber),
        'aria-hidden': 'true'
      });
      var $checkbox = $('<input/>', {
        'class': 'm-footnote__toggle',
        'type': 'checkbox',
        'id': "ref-".concat(this.referenceNumber)
      }).on('change', function (e) {
        e.stopPropagation();
        $('.m-footnote__toggle:checked').not(e.target).prop('checked', false);
      });
      var $note = $('<span/>', {
        'class': 'm-footnote__content',
        'html': "".concat(this.referenceNumber, ". ").concat(this.content)
      }).on('click', function (e) {
        e.stopPropagation();
      });
      this.$footnote.empty().append($label).append($checkbox).append($note).addClass('m-footnote--enhanced');
    }
  }, {
    key: "bindControls",
    value: function bindControls() {
      $(document).on('click', function () {
        $('.m-footnote__toggle:checked').prop('checked', false);
      });
      $(document).on('click', '.m-footnote__toggle', function (e) {
        e.stopPropagation();
      });
    }
  }]);

  return Footnote;
}();

$(function () {
  $('.m-footnote').each(function (i, note) {
    new Footnote(note, i + 1);
  });
});

var Form = /*#__PURE__*/function () {
  function Form() {
    _classCallCheck(this, Form);
  }

  _createClass(Form, null, [{
    key: "autocomplete",
    value: function autocomplete() {
      var $select = $('select[data-autocomplete]');
      $select.each(function (i, autocomplete) {
        var $autocomplete = $(autocomplete);
        var options = {
          containerCssClass: 'a-autocomplete__selection',
          dropdownParent: $autocomplete.parent(),
          width: '100%'
        };

        if (typeof $autocomplete.attr('multiple') === 'undefined') {
          // Single autocomplete
          options.placeholder = 'Type to filter options…';
          $autocomplete.prepend('<option value=""></option>');
        } else {
          options.placeholder = 'Type to select options…';
        }

        $autocomplete.parent().removeClass('a-select').addClass('a-autocomplete');
        $autocomplete.selectWoo(options);
      });
    }
  }, {
    key: "dateInput",
    value: function dateInput() {
      // Tests for input[type="date"] support and provides a datepicker fallback if not
      if ($('input[type="date"]').length === 0) {
        return;
      } // no date inputs present


      function supportsDateInput() {
        var notADateValue = 'not-a-date';
        var input = document.createElement('input');
        input.setAttribute('type', 'date');
        input.setAttribute('value', notADateValue);
        return input.value !== notADateValue;
      }

      if (supportsDateInput()) {
        return;
      } // date input is supported, back out now


      $('input[type="date"]').each(function (i, input) {
        var $input = $(input);
        $input.attr({
          'type': 'text',
          'placeholder': 'YYYY-MM-DD'
        });
        var picker = new Pikaday({
          field: input,
          toString: function toString(date, format) {
            return "".concat(date.getFullYear(), "-").concat(String(date.getMonth() + 1).padStart(2, '0'), "-").concat(String(date.getDate()).padStart(2, '0'));
          },
          firstDay: 1,
          // Monday
          minDate: $input.attr('min') ? new Date($input.attr('min')) : false,
          maxDate: $input.attr('max') ? new Date($input.attr('max')) : false
        });
      });
    }
  }]);

  return Form;
}();

$(function () {
  Form.autocomplete();
  Form.dateInput();
});

var FormValidation = /*#__PURE__*/function () {
  function FormValidation(form) {
    _classCallCheck(this, FormValidation);

    /*
    OK so :
    this.$form = $(form); - this works for the eCommerce _ProductMinView and the multi submit using EmptyResponce (and NOT for the required fields on Forms FrameWork)
    this.$form = $('form:not(#HeaderSearch)'); // works for Required in Forms FramwWork BUT not for eCommerce

    this.$form = $('form:first'); // works (seems to work for both scenario's)
    fibgers crossed this does not break anything else
    */
    this.$form = $('form:first'); // works (seems to work for both scenario's)

    this.settings = {
      scrollToFirstError: true
    }; // State tracking

    this.submitButton = false;
    this.errorList = [];
    this.passesValidation = false; // Add the 'novalidate' attribute to the form given we're handling
    // validation manually.

    this.$form.attr('novalidate', 'novalidate'); // Bind controls

    this.bindControls();
  }

  _createClass(FormValidation, [{
    key: "bindControls",
    value: function bindControls() {
      var _this12 = this;

      this.textareaPatternPolyfill(); //this.requiredCheckboxPolyfill();

      this.$form.on('click', ':submit', function (event) {
        // If user clicked a button to submit the form, track which
        // button it was. There might be important name/value info on it.
        _this12.submitButton = event.currentTarget;
      });
      this.$form.on('submit', function (event) {
        if (!_this12.passesValidation) {
          // The form has been submitted. Stop it.
          event.preventDefault(); // Generate the error report for this form.

          _this12.findErrors();
        }
      });
    }
  }, {
    key: "textareaPatternPolyfill",
    value: function textareaPatternPolyfill() {
      // Fakes support for the `pattern` attribute on <textarea>s
      this.$form.find('textarea[pattern]').on('keyup', validateTextareaPattern);

      function validateTextareaPattern(e) {
        var $input = $(e.target);
        var errorMsg = $input.attr('data-val-regex') || "The format of the value doesn't meet requirements.";
        var pattern = new RegExp($input.attr('pattern'));
        var hasError = !pattern.test($input.val()); // set validity

        $input.get(0).setCustomValidity(hasError ? errorMsg : '');
      }
    } // requiredCheckboxPolyfill() {
    // 	// You cannot have a list of checkboxes where only a single
    // 	// checkbox is required, so let's fake it 'til we make it
    // 	function validateRequiredCheckboxes(inputName) {
    // 		if($(`[name=${inputName}]:checkbox:checked`).length > 0) {
    // 			// we good, remove `required` attributes
    // 			$(`[name=${inputName}]:checkbox`).removeAttr('required');
    // 		}
    // 		else {
    // 			// oh no, we need our `required`s back!
    // 			$(`[name=${inputName}]:checkbox`).attr('required', 'required');
    // 		}
    // 	}
    // 	const $requiredCheckboxes = this.$form.find('[data-val-requiredlist]');
    // 	// On page load
    // 	$requiredCheckboxes.each((i, checkbox) => {
    // 		const inputName = $(checkbox).attr('name');
    // 		validateRequiredCheckboxes(inputName);
    // 	});
    // 	// On input change
    // 	$requiredCheckboxes.on('change', (e) => {
    // 		const inputName = $(e.target).attr('name');
    // 		validateRequiredCheckboxes(inputName);
    // 	});
    // }

  }, {
    key: "findErrors",
    value: function findErrors() {
      var _this13 = this;

      var $inputs = this.$form.find(':input:not(:hidden)');
      this.errorList = [];
      $inputs.each(function (i, currentInput) {
        if (!currentInput.validity.valid) {
          var $input = $(currentInput); // Output a different error message depending on the type of
          // error. Ones not listed here: 
          //   - 'badInput' and 'valid' are generic state booleans and not
          //     tied to any specific validation rules
          //   - 'customError' will be caught by the default check on the
          //     line below.

          var validationMessage = currentInput.validationMessage;

          if (currentInput.validity.patternMismatch) {
            // Value does not match `pattern` attribute
            validationMessage = $input.attr('data-val-regex') || "The format of the value doesn't meet requirements.";
          } else if (currentInput.validity.rangeOverflow) {
            // Value greater than `max` attribute
            validationMessage = "Value must be ".concat($input.attr('max'), " or less.");
          } else if (currentInput.validity.rangeUnderflow) {
            // Value lesser than `min` attribute
            validationMessage = "Value must be at least ".concat($input.attr('min'), ".");
          } else if (currentInput.validity.stepMismatch) {
            // Value does not fit rule defined by `step` attribute
            validationMessage = 'Enter a valid value.';
          } else if (currentInput.validity.tooLong) {
            // Value greater than `maxlength`
            validationMessage = "Value must be less than ".concat($input.attr('maxlength') + 1, " characters. Currently it's ").concat($input.val().length, " characters.");
          } else if (currentInput.validity.tooShort) {
            // Value lesser than `minlength`
            validationMessage = "Value must be ".concat($input.attr('minlength'), " or more characters. Currently it's ").concat($input.val().length, " characters.");
          } else if (currentInput.validity.typeMismatch) {
            // Value does not match `type` (e.g. URL in an email input)
            validationMessage = typeMismatchErrorText($input.attr('type'));
          } else if (currentInput.validity.valueMissing) {
            // Value missing from `required` input
            validationMessage = $input.attr('data-val-required') || $input.attr('data-val-requiredlist') || "Fill out this field.";
          } // We're using name here instead of ID cause checkboxes/radio
          // buttons would have their own IDs, but we only want to show
          // one error for the whole group.


          _this13.errorList.push({
            name: currentInput.name,
            element: currentInput,
            error: validationMessage
          });
        }
      });

      if (this.errorList.length > 0) {
        // If we got errors, show them to the user
        this.printErrors();
      } else {
        // If we don't, proceed to submit the form
        this.passesValidation = true;
        this.submitForm();
      }

      function typeMismatchErrorText(type) {
        switch (type) {
          case 'color':
            return "Enter a colour in hexadecimal format. For example, #ffcc00.";
            break;

          case 'date':
            return "Enter a date.";
            break;

          case 'datetime':
          case 'datetime-local':
            return "Enter a date and time.";
            break;

          case 'email':
            return "Enter an email address.";
            break;

          case 'month':
            return "Enter a month and year.";
            break;

          case 'number':
            return "Enter a number, leaving out thousands separators. For example, 1234.56.";
            break;

          case 'tel':
            return "Enter a telephone number.";
            break;

          case 'time':
            return "Enter a time.";
            break;

          case 'url':
            return "Enter an URL, including the starting protocol. For example, http://example.com";
            break;

          case 'week':
            return "Enter a week and year.";
            break;

          default:
            return "Value does not match expected format.";
            break;
        }
      }
    }
  }, {
    key: "printErrors",
    value: function printErrors() {
      this.clearErrors();
      var uniqueNames = []; // Array of element selectors. If the input is INSIDE of one of these
      // elements, it will use the radio/checkbox/select style of message
      // placement instead of the default for that type

      var errorPlacementExceptions = ['.p-litter-registration__lookup'];
      $.each(this.errorList, function (i, errorItem) {
        var $input = $(errorItem.element); // Check if an error with this name already exists, if so we don't
        // want to do everything 2+ times. This is pretty common with
        // radio and checkbox groups.

        if ($.inArray(errorItem.name, uniqueNames) === -1) {
          // Prepare the error message
          var $errorMessage = $('<div/>', {
            'class': 'm-form__error',
            'id': "".concat(errorItem.name, "-error"),
            'text': errorItem.error
          }); // Add the error container class and error message.
          // This has two significantly different behaviours.
          // If the row *does* have the inline class: 
          //   - we traverse up to the fieldset
          //   - we wrap the fieldset in a new div with the error class
          //   - the error message is placed directly before the row
          // If the row *doesn't* have the inline class:
          //   - the error class is added to the row
          //   - the error message is placed directly before the input
          //   - unless it's a radio, checkbox or select, then the error
          //     is placed directly before the input's parent element

          var $inputRow = $input.closest('.m-form__row');

          if ($inputRow.hasClass('m-form__row--inline')) {
            // if has inline class
            // move up to fieldset and wrap it
            $inputRow.closest('fieldset').wrap($('<div/>', {
              'class': 'm-form__error-group'
            })); // add error message

            $inputRow.before($errorMessage);
          } else if ($input.closest(errorPlacementExceptions.join(',')).length > 0) {
            $inputRow.addClass('m-form__error-group');
            $input.parent().before($errorMessage);
          } else {
            // if doesn't have inline class
            // add error class
            $inputRow.addClass('m-form__error-group'); // add error message directly before input
            // unless it's a radio/checkbox/select, then add it
            // before the wrapping element

            switch (errorItem.element.type) {
              case 'radio':
              case 'checkbox':
              case 'select-one':
              case 'range':
                $input.parent('.a-checkbox, .a-radio, .a-select, .a-range').before($errorMessage);
                break;

              default:
                $input.before($errorMessage);
                break;
            }
          }
        } // Add aria-invalid attribute to invalid inputs


        $input.attr('aria-invalid', 'true');
        uniqueNames.push(errorItem.name);
      });
      this.scrollToFirstError();
    }
  }, {
    key: "clearErrors",
    value: function clearErrors() {
      // Remove aria-invalid attributes
      this.$form.find('[aria-invalid]').removeAttr('aria-invalid'); // Remove error message HTML

      this.$form.find('.m-form__error').remove(); // Remove error message container class — row edition

      this.$form.find('.m-form__row.m-form__error-group').removeClass('m-form__error-group'); // Remove error message container class — fieldset edition

      this.$form.find('.m-form__error-group > fieldset').unwrap();
    }
  }, {
    key: "scrollToFirstError",
    value: function scrollToFirstError() {
      if (!this.settings.scrollToFirstError || !this.$form.find('.m-form__error-group').length) {
        return;
      }

      var scrollDuration = 500; // ms
      // If the user has reduced motion enabled, 
      // reduce animation time to 0 (instantaneous jump)

      if (window.matchMedia('only screen and (prefers-reduced-motion: reduce)').matches) {
        scrollDuration = 0;
      }

      $('html,body').animate({
        'scrollTop': this.$form.find('.m-form__error-group').eq(0).offset().top
      }, scrollDuration);
    }
  }, {
    key: "submitForm",
    value: function submitForm() {
      if (!this.$form.find(':submit').hasClass("nospin")) {
        // Disable submit button.
        this.$form.find(':submit').prop('disabled', true); // Add loading class to clicked button OR the first in the form.

        if (this.submitButton) {
          $(this.submitButton).attr('aria-busy', 'true');
        } else {
          this.$form.find(':submit').eq(0).attr('aria-busy', 'true');
        } // Insert a placeholder element with the same name/value info as the
        // clicked submit button, so that info is still sent to the server.


        if (this.submitButton && this.submitButton.name) {
          var $hiddenSubmit = $('<input/>', {
            'type': 'hidden',
            'name': this.submitButton.name,
            'value': this.submitButton.value
          });
          this.$form.append($hiddenSubmit);
        }
      } // Submit form


      this.$form.eq(0).submit();
    }
  }]);

  return FormValidation;
}();

$(function () {
  $('form:not([novalidate])').each(function (i, form) {
    new FormValidation(form);
  });
});

var Gallery = /*#__PURE__*/function () {
  function Gallery(container) {
    _classCallCheck(this, Gallery);

    this.$container = $(container);
    this.$thumbs = this.$container.find('.m-gallery__gallery').children();

    if (this.$thumbs.length === 0) {
      return;
    } // Setup


    this.id = "gallery-".concat(Helper.RandomGuid());
    this.setupThumbnails();
    this.showFirstImage();
  }

  _createClass(Gallery, [{
    key: "updatePreview",
    value: function updatePreview(src, alt) {
      var caption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      // If preview element already exists, just update it
      if (this.$preview) {
        this.$preview.attr({
          'src': src,
          'alt': alt
        });

        if (caption) {
          this.$caption.text(caption).show();
        } else {
          this.$caption.text('').hide();
        }

        return;
      } // If it doesn't, create it 


      var $previewWrapper = $('<figure/>', {
        'class': 'm-gallery__preview'
      });
      this.$preview = $('<img/>', {
        'class': 'm-gallery__preview-image',
        'aria-live': 'polite',
        'src': src,
        'alt': alt
      }); // Caption area

      this.$caption = $('<figcaption/>', {
        'class': 'm-gallery__caption',
        'text': caption
      });
      $previewWrapper.append(this.$preview).append(this.$caption);
      this.$container.prepend($previewWrapper);
    }
  }, {
    key: "setupThumbnails",
    value: function setupThumbnails() {
      var _this14 = this;

      this.$thumbs.attr({
        'aria-controls': this.id
      }).on('click', function (e) {
        e.preventDefault();
        var $link = $(e.currentTarget);

        _this14.updatePreview($link.attr('href'), $link.find('img').attr('alt'), $link.find('img').attr('title'));
      });
    }
  }, {
    key: "showFirstImage",
    value: function showFirstImage() {
      this.$thumbs.eq(0).trigger('click');
    }
  }]);

  return Gallery;
}();

$(function () {
  $('.m-gallery').each(function (i, container) {
    new Gallery(container);
  });
});

var GDPRBanner = /*#__PURE__*/function () {
  function GDPRBanner(container, callback) {
    _classCallCheck(this, GDPRBanner);

    if ($(container).length === 0) {
      return;
    }

    this.$container = $(container);

    this.callback = callback || function () {};

    this.$form = this.$container.find('.o-gdpr-banner__form');
    this.bindControls();
  }

  _createClass(GDPRBanner, [{
    key: "showBanner",
    value: function showBanner() {
      this.$container.removeAttr('hidden');
    }
  }, {
    key: "hideBanner",
    value: function hideBanner() {
      this.$container.attr('hidden', 'hidden');
    }
  }, {
    key: "bindControls",
    value: function bindControls() {
      var _this15 = this;

      this.$form.find('button').on('click', function (e) {
        // Don't submit the form cause it doesn't actually point anywhere
        e.preventDefault();

        _this15.setCookiePrefs();
      });
      $('[data-gdpr-banner]').on('click', function (e) {
        e.preventDefault();

        _this15.showBanner();
      });
    }
  }, {
    key: "setCookiePrefs",
    value: function setCookiePrefs() {
      // Loop through each checkbox, adding or deleting cookies as appropriate
      this.$form.find('[name="CookiePreferences"]').each(function (i, box) {
        var $checkbox = $(box);

        if ($checkbox.is(':checked')) {
          // Set the cookie if the box is checked
          Helper.Cookie.Set("gdpr.".concat($checkbox.val()), 'true', 365);
        } else {
          // Remove the cookie if it's not 
          Helper.Cookie.Destroy("gdpr.".concat($checkbox.val()));
        }
      }); // Close the GDPR banner

      this.hideBanner(); // Fire off the callback

      this.callback();
    }
  }]);

  return GDPRBanner;
}();

var ImageUpload = /*#__PURE__*/function () {
  function ImageUpload() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ImageUpload);

    var defaults = {
      vueContainer: '',
      debug: true
    };
    this.settings = $.extend(true, {}, defaults, options);
    this.$container = $(this.settings.vueContainer);
    this.app = {}; // Give the container an ID 

    this.id = this.$container.attr('id');

    if (!this.id) {
      this.id = "ImageUpload-".concat(Helper.RandomGuid());
      this.$container.attr({
        'id': this.id
      });
    } // Init things


    this.getVue();
  }

  _createClass(ImageUpload, [{
    key: "getVue",
    value: function getVue() {
      var _this16 = this;

      if (window.Vue) {
        this.initImageUpload();
        return;
      }

      $.when($.getScript(this.settings.debug ? 'https://cdn.jsdelivr.net/npm/vue/dist/vue.js' : 'https://cdn.jsdelivr.net/npm/vue'), $.Deferred(function (deferred) {
        $(deferred.resolve);
      })).done(function () {
        _this16.initImageUpload();
      });
    }
  }, {
    key: "initImageUpload",
    value: function initImageUpload() {
      var self = this;
      this.app = new Vue({
        el: "#".concat(this.id),
        data: {
          initialized: false,
          loading: false,
          fileList: {},
          itemSelected: 0,
          imageList: []
        },
        mounted: function mounted() {
          this.initialized = true;
        },
        methods: {
          fileInputChanged: function fileInputChanged(e) {
            this.imageList = [];

            if (!e.target.files || !e.target.files.length) {
              return;
            }

            this.fileList = e.target.files;

            for (var _i = 0, _Object$keys = Object.keys(this.fileList); _i < _Object$keys.length; _i++) {
              var key = _Object$keys[_i];
              var file = this.fileList[key];
              this.createImage(file, key);
            }

            ;
            this.itemSelected = 0;
          },
          createImage: function createImage(file, i) {
            var _this17 = this;

            var reader = new FileReader();
            this.loading = true;

            reader.onload = function (e) {
              _this17.imageList.push({
                filename: file.name,
                data: e.target.result
              });

              if (_this17.imageList.length >= _this17.fileList.length) {
                _this17.loading = false;
              }
            };

            reader.readAsDataURL(file);
          }
        },
        computed: {}
      });
    }
  }]);

  return ImageUpload;
}();

var Modal = /*#__PURE__*/function () {
  function Modal(toggle, modal) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Modal);

    this.$toggle = $(toggle);
    this.$modal = $(modal);

    if (!this.$toggle.length || !this.$modal.length) {
      return;
    } // Settings object


    var defaults = {
      callback: function callback() {}
    };
    this.settings = $.extend(true, {}, defaults, options); // Setup A11y IDs

    this.toggleId = this.$toggle.attr('id') || "Modal-".concat(Helper.RandomGuid(), "-Toggle");
    this.modalId = this.$modal.attr('id') || "Modal-".concat(Helper.RandomGuid()); // Run stuff

    this.setupA11y();
    this.bindControls();
  }

  _createClass(Modal, [{
    key: "setupA11y",
    value: function setupA11y() {
      this.$toggle.attr({
        'id': this.toggleId,
        'aria-expanded': 'false',
        'aria-controls': this.modalId
      });
      this.$modal.attr({
        'aria-controlledby': this.toggleId,
        'hidden': 'hidden'
      }).addClass('is-modal');
    }
  }, {
    key: "bindControls",
    value: function bindControls() {
      var _this18 = this;

      this.$toggle.on('click', function (e) {
        e.preventDefault();

        _this18.toggle();
      });
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.$toggle.attr('aria-expanded') === 'true') {
        this.close();
        return;
      }

      this.open();
    }
  }, {
    key: "open",
    value: function open() {
      var _this19 = this;

      Helper.Backdrop.Show({
        mods: ['black', 'close'],
        onClick: function onClick() {
          _this19.close();
        }
      });
      this.$toggle.attr('aria-expanded', 'true');
      this.$modal.removeAttr('hidden');
      Helper.Focus.Trap(this.$modal, this.modalId);
      Helper.Focus.Move(this.$modal, true);
      this.settings.callback();
    }
  }, {
    key: "close",
    value: function close() {
      Helper.Backdrop.Hide();
      this.$toggle.attr('aria-expanded', 'false');
      this.$modal.attr('hidden', 'hidden');
      Helper.Focus.Release(this.$modal, this.modalId);
      Helper.Focus.Move(this.$toggle);
    }
  }]);

  return Modal;
}();

var MyAccountNavigation = /*#__PURE__*/function () {
  function MyAccountNavigation() {
    _classCallCheck(this, MyAccountNavigation);

    this.$toggle = $('.o-account-navigation__current');
    this.$toggleLabel = $('.o-account-navigation__current-label');
    this.$menu = $('.o-account-navigation__list.o-account-navigation__list--parent');

    if (!this.$toggle.length || !this.$menu.length) {
      return;
    }

    this.menuId = this.$menu.attr('id') || "MyAccountNavigation-".concat(Helper.RandomGuid());
    this.toggleId = this.$toggle.attr('id') || "".concat(this.menuId, "-Toggle");
    this.initialized = false; // Run function every time window size is resized past threshold

    this.mediaQuery = Helper.MQ('mars');
    this.mediaQuery.addListener(this.doWeEvenNeedThisRightNow.bind(this));
  }

  _createClass(MyAccountNavigation, [{
    key: "doWeEvenNeedThisRightNow",
    value: function doWeEvenNeedThisRightNow() {
      // No we don't
      if (this.mediaQuery.matches) {
        this.open();
        return;
      } // Yes we do


      this.close();

      if (!this.initialized) {
        this.setupA11y();
        this.bindControls();
        this.getSelectedItem();
        this.initialized = true;
      }
    }
  }, {
    key: "setupA11y",
    value: function setupA11y() {
      this.$toggle.attr({
        'id': this.toggleId,
        'aria-expanded': 'false',
        'aria-controls': this.menuId,
        'hidden': 'hidden'
      });
      this.$menu.attr({
        'id': this.menuId,
        'aria-controlledby': this.toggleId,
        'hidden': 'hidden'
      });
    }
  }, {
    key: "bindControls",
    value: function bindControls() {
      var _this20 = this;

      this.$toggle.on('click', function () {
        _this20.toggle();
      });
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.$menu.is(':visible')) {
        this.close();
        return;
      }

      this.open();
    }
  }, {
    key: "open",
    value: function open() {
      this.$toggle.attr('aria-expanded', 'true');
      this.$menu.removeAttr('hidden');
    }
  }, {
    key: "close",
    value: function close() {
      this.$toggle.attr('aria-expanded', 'false');
      this.$menu.attr('hidden', 'hidden');
    }
  }, {
    key: "getSelectedItem",
    value: function getSelectedItem() {
      var selectedItemLabel = this.$menu.find('a[aria-current="true"]').html();
      this.$toggleLabel.html(selectedItemLabel);
      this.$toggle.removeAttr('hidden');
    }
  }]);

  return MyAccountNavigation;
}();

var Navigation = /*#__PURE__*/function () {
  function Navigation() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Navigation);

    this.$toggle = $(options.toggle);
    this.$drawer = $(options.drawer); // Check to make sure stuff exists before continuing

    if (!this.$toggle.length || !this.$drawer.length) {
      return;
    }

    this.scrollManager = new Helper.Scroll(this.$drawer);
    this.setupA11y();
    this.bindEvents();
    this.bindControls();
  }

  _createClass(Navigation, [{
    key: "setupA11y",
    value: function setupA11y() {
      var drawerId = this.$drawer.attr('id'); // Loop through toggles and get/generate IDs

      var toggleIds = [];
      this.$toggle.each(function (i, control) {
        var $control = $(control);
        var controlId = $control.attr('id') || "navigation-toggle-".concat(Helper.RandomGuid());
        toggleIds.push(controlId);
        $control.attr({
          'aria-expanded': 'false',
          'aria-controls': drawerId,
          'id': controlId
        });
      }); // Generate mobile close button

      this.buildCloseButton("navigation-toggle-".concat(Helper.RandomGuid()), drawerId); // Attach IDs to drawer

      this.$drawer.attr('aria-controlledby', toggleIds.join(' '));
    }
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this21 = this;

      $(window).on('resize', function () {
        _this21.close(true);
      });
    }
  }, {
    key: "bindControls",
    value: function bindControls() {
      var _this22 = this;

      this.$toggle.on('click', function (e) {
        e.preventDefault();

        _this22.toggle();
      });
    }
  }, {
    key: "buildCloseButton",
    value: function buildCloseButton(id, drawerId) {
      var _this23 = this;

      if (this.$drawer.find('button').length > 0) {
        return;
      }

      var $button = $('<button/>', {
        'class': 'm-navigation__close',
        'type': 'button',
        'text': 'Back',
        'aria-controls': drawerId,
        'id': id
      }).on('click', function () {
        _this23.close();
      });
      this.$drawer.prepend($button);
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if ($('html').hasClass('nav-open')) {
        this.close();
        return;
      }

      this.open();
    }
  }, {
    key: "open",
    value: function open() {
      var _this24 = this;

      Helper.Backdrop.Show({
        id: 'Navigation',
        mods: ['white'],
        onClick: function onClick() {
          _this24.close();
        }
      }); // Set classes

      $('html').addClass('nav-open nav-fadein');
      setTimeout(function () {
        $('html').removeClass('nav-fadein');
        Helper.Focus.Trap(_this24.$drawer, 'Navigation');
        Helper.Focus.Move(_this24.$drawer);
      }, 500); // match CSS

      this.$toggle.attr('aria-expanded', 'true');
      this.scrollManager.disable();
    }
  }, {
    key: "close",
    value: function close() {
      var doItFast = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      Helper.Backdrop.Hide({
        id: 'Navigation'
      }); // This method gets fired a lot, so don't bother with this if we don't need it

      if ($('html').hasClass('nav-open')) {
        // Set classes
        if (doItFast) {
          $('html').removeClass('nav-open');
        } else {
          $('html').addClass('nav-fadeout');
          setTimeout(function () {
            $('html').removeClass('nav-open nav-fadeout');
          }, 500); // match CSS
        }

        this.$toggle.attr('aria-expanded', 'false');
        this.scrollManager.enable();
        Helper.Focus.Release(this.$drawer, 'Navigation');
        Helper.Focus.Move(this.$toggle);
      }
    }
  }]);

  return Navigation;
}();

$(function () {
  new Navigation({
    toggle: '[href="#navigation"]',
    drawer: '#navigation'
  });
});

var NavigationAccount = /*#__PURE__*/function () {
  function NavigationAccount() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, NavigationAccount);

    this.$toggle = $(options.toggle);
    this.$popover = $(options.popover); // Check to make sure stuff exists before continuing

    if (!this.$toggle.length || !this.$popover.length) {
      return;
    } // Media query


    this.mediaQuery = Helper.MQ('mercury'); // Setup

    this.setupA11y();
    this.bindControls();
    this.bindEvents();
  }

  _createClass(NavigationAccount, [{
    key: "setupA11y",
    value: function setupA11y() {
      this.$toggle.attr({
        'aria-controls': this.$popover.attr('id'),
        'aria-expanded': 'false'
      });
      this.$popover.attr({
        'aria-controlledby': this.$toggle.attr('id')
      });
    }
  }, {
    key: "bindControls",
    value: function bindControls() {
      var _this25 = this;

      this.$toggle.on('click', function (e) {
        e.preventDefault();

        _this25.toggle();
      });
      this.$popover.on('click', function (e) {
        e.stopPropagation();
      });
      this.$popover.on('click', function (e) {
        e.stopPropagation();
      });
    }
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this26 = this;

      $(window).on('resize', function () {
        _this26.close(true);
      });
    }
  }, {
    key: "open",
    value: function open() {
      var _this27 = this;

      var togglePosition = Helper.Position.Coords(this.$toggle);
      Helper.Backdrop.Show({
        id: 'NavigationAccount',
        onClick: function onClick() {
          _this27.close();
        }
      }); // Determine how it will appear

      console.log(this.mediaQuery.matches);

      if (this.mediaQuery.matches) {
        // narrow dropdown style
        this.$popover.css({
          'top': togglePosition.document.OB,
          'right': togglePosition.document.MR,
          'left': ''
        }).addClass('m-account--popover');
      } else {
        // screen width dropdown style
        this.$popover.css({
          'top': togglePosition.document.OB,
          'left': 0,
          'right': 0
        }).addClass('m-account--popover');
      } // Actually open the thing


      this.$toggle.attr('aria-expanded', 'true');
      this.$popover.removeAttr('hidden'); // Move keyboard focus for a11y

      Helper.Focus.Trap(this.$popover, 'NavigationAccount');
      Helper.Focus.Move(this.$popover);
    }
  }, {
    key: "close",
    value: function close() {
      var autoclosed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      // Hide the things 
      this.$toggle.attr('aria-expanded', 'false');
      this.$popover.attr('hidden', 'hidden');
      Helper.Backdrop.Hide({
        id: 'NavigationAccount'
      }); // Move keyboard focus for a11y

      Helper.Focus.Release(this.$popover, 'NavigationAccount');

      if (!autoclosed) {
        Helper.Focus.Move(this.$toggle);
      }
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.$toggle.attr('aria-expanded') === 'true') {
        this.close();
        return;
      }

      this.open();
    }
  }]);

  return NavigationAccount;
}();

$(function () {
  new NavigationAccount({
    toggle: '.js-account-toggle',
    popover: '#AccountPopover'
  });
});

var NavigationSearch = /*#__PURE__*/function () {
  function NavigationSearch() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, NavigationSearch);

    this.$toggle = $(options.toggle);
    this.$popover = $(options.popover); // Check to make sure stuff exists before continuing

    if (!this.$toggle.length || !this.$popover.length) {
      return;
    } // Setup


    this.setupA11y();
    this.bindControls();
    this.bindEvents(); // ANDROID FIX: Android fires a resize event when the keyboard is
    // opened, but we also want to close the popover when the browser width
    // is resized, so we're keeping track of the width.

    this.viewportWidth = 0;
  }

  _createClass(NavigationSearch, [{
    key: "setupA11y",
    value: function setupA11y() {
      this.$toggle.attr({
        'aria-controls': this.$popover.attr('id'),
        'aria-expanded': 'false'
      });
      this.$popover.attr({
        'aria-controlledby': this.$toggle.attr('id')
      });
    }
  }, {
    key: "bindControls",
    value: function bindControls() {
      var _this28 = this;

      this.$toggle.on('click', function (e) {
        e.preventDefault();

        _this28.toggle();
      });
      this.$popover.on('click', function (e) {
        e.stopPropagation();
      });
      this.$popover.on('click', function (e) {
        e.stopPropagation();
      });
    }
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      var _this29 = this;

      $(window).on('resize', function () {
        if (_this29.viewportWidth !== $(window).width()) {
          _this29.close(true);
        }
      });
    }
  }, {
    key: "open",
    value: function open() {
      var _this30 = this;

      var togglePosition = Helper.Position.Coords(this.$toggle);
      Helper.Backdrop.Show({
        id: 'NavigationSearch',
        onClick: function onClick() {
          _this30.close();
        }
      }); // Determine how it will appear

      if (Helper.MQ('mercury')) {
        // big enough for dropdown style
        this.$popover.css({
          'top': togglePosition.document.OB,
          'right': togglePosition.document.MR,
          'left': ''
        });
      } else {
        // otherwise use modal style
        this.$popover.css({
          'top': togglePosition.document.OB,
          'left': 0,
          'right': 0
        });
      } // ANDROID FIX


      this.viewportWidth = $(window).width(); // Actually open the thing

      this.$toggle.attr('aria-expanded', 'true');
      this.$popover.removeAttr('hidden').addClass('o-search-form--popover'); // Move keyboard focus for a11y

      Helper.Focus.Trap(this.$popover, 'NavigationSearch');
      Helper.Focus.Move(this.$popover, true);
    }
  }, {
    key: "close",
    value: function close() {
      var autoclosed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      // Hide the things 
      this.$toggle.attr('aria-expanded', 'false');
      this.$popover.attr('hidden', 'hidden');
      Helper.Backdrop.Hide({
        id: 'NavigationSearch'
      }); // Move keyboard focus for a11y

      Helper.Focus.Release(this.$popover, 'NavigationSearch');

      if (!autoclosed) {
        Helper.Focus.Move(this.$toggle);
      }
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.$toggle.attr('aria-expanded') === 'true') {
        this.close();
        return;
      }

      this.open();
    }
  }]);

  return NavigationSearch;
}();

$(function () {
  new NavigationSearch({
    toggle: '.js-search-toggle',
    popover: '#SearchPopover'
  });
});

var ProductCard = /*#__PURE__*/function () {
  function ProductCard(form) {
    _classCallCheck(this, ProductCard);

    this.$form = $(form);
    this.$submitButton = this.$form.find('[type="submit"]');
    this.bindControls();
  }

  _createClass(ProductCard, [{
    key: "bindControls",
    value: function bindControls() {
      var _this31 = this;

      this.$form.on('submit', function (e) {
        e.preventDefault();

        _this31.$submitButton.attr('aria-busy', 'true').prop('disabled', true);

        $.ajax({
          url: _this31.$form.attr('action'),
          method: _this31.$form.attr('method')
        }).done(function (data) {}).always(function () {
          _this31.$submitButton.removeAttr('aria-busy').text('Added to cart');
        });
      });
    }
  }]);

  return ProductCard;
}();

$(function () {
  $('.m-product-card__form').each(function (i, item) {
    new ProductCard(item);
  });
});

var RangeInput = /*#__PURE__*/function () {
  function RangeInput(container) {
    _classCallCheck(this, RangeInput);

    this.$container = $(container);
    this.$input = this.$container.find('.a-range__input');

    if (!this.$container.length || !this.$input.length) {
      return;
    }

    this.$valCounter;
    this.buildHtml();
    this.bindControls();
  }

  _createClass(RangeInput, [{
    key: "buildHtml",
    value: function buildHtml() {
      var $counter = $('<div/>', {
        'class': 'a-range__value',
        'text': this.determineLabel()
      });
      this.$container.append($counter);
      this.$valCounter = this.$container.find('.a-range__value');
    }
  }, {
    key: "bindControls",
    value: function bindControls() {
      var _this32 = this;

      this.$input.on('input', function () {
        _this32.$valCounter.text(_this32.determineLabel());
      });
    }
  }, {
    key: "determineLabel",
    value: function determineLabel() {
      var inputValue = this.$input.val();
      var minLabel = this.$input.attr('data-min-label');
      var maxLabel = this.$input.attr('data-max-label');
      var prefix = this.$input.attr('data-prefix');
      var suffix = this.$input.attr('data-suffix');

      if (minLabel && inputValue === this.$input.attr('min')) {
        return minLabel;
      }

      if (maxLabel && inputValue === this.$input.attr('max')) {
        return maxLabel;
      }

      if (prefix && suffix) {
        return "".concat(prefix).concat(inputValue).concat(suffix);
      }

      if (prefix) {
        return "".concat(prefix).concat(inputValue);
      }

      if (suffix) {
        return "".concat(inputValue).concat(suffix);
      }

      return inputValue;
    }
  }]);

  return RangeInput;
}();

$(function () {
  $('.a-range').each(function (i, container) {
    new RangeInput(container);
  });
});

var Repeater = /*#__PURE__*/function () {
  function Repeater($module) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Repeater);

    this.$module = $module; // Settings

    var defaults = {
      indexReplacementString: "%i",
      indexReplacementAttributes: ["name", "id", "for", "aria-describedby", "aria-controlledby", "aria-controls"],
      rowSelector: "[data-repeater-item]",
      templateSelector: "[data-repeater-template]",
      containerSelector: "[data-repeater-container]",
      addButtonSelector: "[data-repeater-add]",
      removeButtonSelector: "[data-repeater-remove]",
      min: 1,
      max: null,
      showStartingRow: true,
      warnOnRemove: true,
      warnOnRemoveMessage: "Are you sure?",
      warnOnMinMessage: "You must have at least 1 row.",
      addRowCallback: function addRowCallback() {},
      removeRowCallback: function removeRowCallback() {}
    };
    this.settings = Object.assign({}, defaults, settings); // Get the things

    this.template = $module.querySelector(this.settings.templateSelector);
    this.$container = $module.querySelector(this.settings.containerSelector);
    this.$addButton = $module.querySelector(this.settings.addButtonSelector); // Work out how many sections already exist

    this.rowCount = this.countRows();
    this.rowIndex = this.rowCount; // Let's go!

    this.create();
  }

  _createClass(Repeater, [{
    key: "create",
    value: function create() {
      // ARIA stuff
      var containerId = "Repeater-" + Helper.RandomGuid();
      this.$addButton.setAttribute("aria-controls", containerId);
      this.$container.setAttribute("aria-live", "polite");
      this.$container.setAttribute("aria-relevant", "additions removals"); // Bind events

      this.$addButton.bindClick = this.onAdd.bind(this);
      this.$addButton.addEventListener("click", this.$addButton.bindClick, true); // If there are no existing rows, show an empty one just to get started

      if (this.settings.showStartingRow && this.rowIndex === 0) {
        this.addRow();
      } // If there ARE existing rows, make sure their remove buttons work


      if (this.rowIndex > 0) {
        this.bindRemoveButtons(this.$container);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      // ARIA stuff
      this.$addButton.removeAttribute("aria-controls");
      this.$container.removeAttribute("aria-live");
      this.$container.removeAttribute("aria-relevant"); // Unbind events

      this.$addButton.removeEventListener("click", this.$addButton.bindClick, true);
    }
  }, {
    key: "countRows",
    value: function countRows() {
      var _this$$container$quer;

      return ((_this$$container$quer = this.$container.querySelectorAll(this.settings.rowSelector)) === null || _this$$container$quer === void 0 ? void 0 : _this$$container$quer.length) || 0;
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      this.addRow();
    }
  }, {
    key: "onRemove",
    value: function onRemove(e) {
      this.removeRow(e.target.closest(this.settings.rowSelector));
    }
  }, {
    key: "bindRemoveButtons",
    value: function bindRemoveButtons($scope) {
      var $removeButtons = $scope.querySelectorAll(this.settings.removeButtonSelector);

      for (var i = 0; i < $removeButtons.length; i++) {
        $removeButtons[i].bindClick = this.onRemove.bind(this);
        $removeButtons[i].addEventListener("click", $removeButtons[i].bindClick, true);
      }
    }
  }, {
    key: "addRow",
    value: function addRow() {
      // Get Row HTML
      var $html = this.getTemplateContent(); // Find and bind the remove row button

      this.bindRemoveButtons($html); // Remember the index for the callback

      var rowIndex = this.rowIndex; // Add it to the DOM

      this.$container.appendChild($html);
      this.rowIndex++;
      this.rowCount++; // If we're now above the max rows, hide the add button

      if (this.settings.max && this.rowCount >= this.settings.max) {
        this.hideButton();
      } // Callback


      if (this.settings.addRowCallback) {
        var $newRow = this.$container.querySelector("".concat(this.settings.rowSelector, ":last-child"));
        this.settings.addRowCallback($newRow, rowIndex);
      }
    }
  }, {
    key: "removeRow",
    value: function removeRow($rowElement) {
      // If removing this row would put us below the min, don't let 'em
      if (this.settings.min && this.rowCount - 1 < this.settings.min) {
        alert(this.settings.warnOnMinMessage);
        return;
      } // Ask for confirmation about removing the row


      if (this.settings.warnOnRemove && !window.confirm(this.settings.warnOnRemoveMessage)) {
        return;
      }

      $rowElement.remove();
      this.rowCount--; // If we're below the max rows now, show the add button

      if (this.settings.max && this.rowCount < this.settings.max) {
        this.showButton();
      } // Callback


      if (this.settings.removeRowCallback) {
        this.settings.removeRowCallback();
      }
    }
  }, {
    key: "showButton",
    value: function showButton() {
      this.$addButton.removeAttribute("hidden");
    }
  }, {
    key: "hideButton",
    value: function hideButton() {
      this.$addButton.setAttribute("hidden", "hidden");
    }
  }, {
    key: "getTemplateContent",
    value: function getTemplateContent() {
      //return this.template.innerHTML;
      // Polyfills lack of IE 11 support for <template>
      if ("content" in document.createElement("template")) {
        return this.replaceTemplateValues(document.importNode(this.template.content, true));
      } else {
        var fragment = document.createDocumentFragment();
        var children = this.template.childNodes;

        for (var i = 0; i < children.length; i++) {
          fragment.appendChild(children[i].cloneNode(true));
        }

        return this.replaceTemplateValues(fragment);
      }
    }
  }, {
    key: "replaceTemplateValues",
    value: function replaceTemplateValues($row) {
      var _this33 = this;

      if (!this.settings.indexReplacementAttributes.length) {
        return $row;
      }

      this.settings.indexReplacementAttributes.forEach(function (attr) {
        _this33.replaceValues($row, attr);
      });
      return $row;
    }
  }, {
    key: "replaceValues",
    value: function replaceValues($row, attribute) {
      var _this34 = this;

      var $elements = $row.querySelectorAll("[".concat(attribute, "*=\"").concat(this.settings.indexReplacementString, "\"]"));
      $elements.forEach(function (elem) {
        var newValue = elem.getAttribute(attribute).replace(/%i/gm, _this34.rowIndex);
        elem.setAttribute(attribute, newValue);
      });
      return $row;
    }
  }]);

  return Repeater;
}();

var Search = function Search() {
  _classCallCheck(this, Search);

  if (!$('.t-search').length) {
    return;
  }
};

$(function () {
  new Search();
});

var SearchFilters = /*#__PURE__*/function () {
  function SearchFilters(container) {
    _classCallCheck(this, SearchFilters);

    this.$container = $(container);

    if (this.$container.length === 0) {
      return;
    }

    this.$filters = this.$container.find('.t-search__filter');
    this.bindControls();
  }

  _createClass(SearchFilters, [{
    key: "bindControls",
    value: function bindControls() {
      var _this35 = this;

      this.$filters.on('toggle', function (e) {
        var $target = $(e.target);

        if (e.target.open) {
          _this35.closeAllFilters(e.target);

          _this35.positionFilter($target);
        }
      }); // Below two handlers for clicking outside of a dropdown closing it

      $(document).on('click', function () {
        _this35.closeAllFilters();
      });
      this.$filters.on('click', function (e) {
        e.stopPropagation();
      });
    }
  }, {
    key: "positionFilter",
    value: function positionFilter($filter) {
      var $body = $filter.find('.t-search__filter-body'); // DO THE MATH

      var filterPos = $filter.prop('offsetLeft');
      var viewportWidth = $(window).width();
      var filterBodyCoords = {
        leftAligned: {
          left: filterPos,
          right: filterPos + $body.outerWidth()
        },
        rightAligned: {
          right: filterPos + $filter.outerWidth(),
          left: filterPos + $filter.outerWidth() - $body.outerWidth()
        }
      };
      $body.removeClass('t-search__filter-body--right t-search__filter-body--centre');

      if (filterBodyCoords.leftAligned.right <= viewportWidth) {// Align it left
        // The default, so no need to actually do anything here, I guess?
      } else if (filterBodyCoords.rightAligned.left >= 0) {
        // Align it right
        $body.addClass('t-search__filter-body--right');
      } else {
        // Align it centred
        $body.addClass('t-search__filter-body--centre');
      }
    }
  }, {
    key: "closeAllFilters",
    value: function closeAllFilters(exception) {
      if (exception) {
        $(exception).siblings('.t-search__filter').removeAttr('open');
      } else {
        this.$filters.removeAttr('open');
      }
    }
  }]);

  return SearchFilters;
}();

var Stepper = /*#__PURE__*/function () {
  function Stepper(container) {
    _classCallCheck(this, Stepper);

    this.$container = $(container);
    this.$input = this.$container.find('input[type="number"]');
    this.min = parseInt(this.$input.attr('min')) || false;
    this.max = parseInt(this.$input.attr('max')) || false;
    this.step = parseInt(this.$input.attr('step')) || 1;
    this.buildButtons();
  }

  _createClass(Stepper, [{
    key: "buildButtons",
    value: function buildButtons() {
      var _this36 = this;

      // Get/generate ID to input to bind ARIA to 
      var id = this.$input.attr('id');

      if (!id) {
        id = "stepper-".concat(Helper.RandomGuid());
        this.$input.attr('id', id);
      }

      this.$input.attr({
        'aria-live': 'polite'
      }).on('change', function () {
        _this36.incrementStepper(0);
      }); // Up button

      var $upButton = $('<button/>', {
        'type': 'button',
        'class': 'a-stepper__button a-stepper__button--up',
        'html': '+ <span class="u-screenreader">Add 1</span>',
        'aria-controls': id
      }).on('click', function (e) {
        _this36.incrementStepper(_this36.step);

        $(e.currentTarget).trigger('change');
      });
      this.$container.append($upButton); // Down button

      var $downButton = $('<button/>', {
        'type': 'button',
        'class': 'a-stepper__button a-stepper__button--down',
        'html': '- <span class="u-screenreader">Remove 1</span>',
        'aria-controls': id
      }).on('click', function (e) {
        _this36.incrementStepper(0 - _this36.step);

        $(e.currentTarget).trigger('change');
      });
      this.$container.append($downButton);
    }
  }, {
    key: "incrementStepper",
    value: function incrementStepper(change) {
      var value = parseInt(this.$input.val());
      var returnVal = value + change; // Make sure value is a multiple of step

      var moduloMin = this.min || 0;

      if ((moduloMin + returnVal) % this.step !== 0) {
        returnVal = Math.floor(Math.floor(returnVal / this.step) * this.step + moduloMin); //console.log(`Not a multiple of ${this.step} (+ min ${moduloMin}). Changing returnVal to ${returnVal}.`)
      } // Make sure value isn't lower than min


      if (this.min && returnVal < this.min) {
        returnVal = this.min; //console.log(`Value too low. Changing returnVal to ${returnVal}.`)
      } // Make sure value isn't higher than max


      if (this.max && returnVal > this.max) {
        returnVal = this.max; //console.log(`Value too high. Changing returnVal to ${returnVal}.`)
      }

      this.$input.val(returnVal);
      return returnVal;
    }
  }]);

  return Stepper;
}();

$(function () {
  $('.a-stepper').each(function (i, stepper) {
    new Stepper(stepper);
  });
});

var Tabs = /*#__PURE__*/function () {
  function Tabs(container) {
    _classCallCheck(this, Tabs);

    this.$container = $(container);
    this.$panels = this.$container.find('.m-tabs__panel');
    this.$tabList = {}; // If there's only one panel, don't even bother, unless you actually can have one tab!

    if (this.$panels.length <= 1 && !(this.$container.data("allowsingletab") === true)) {
      return;
    }

    this.$container.addClass('is-enhanced');
    this.buildTabList();
  }

  _createClass(Tabs, [{
    key: "buildTabList",
    value: function buildTabList() {
      var _this37 = this;

      var firstId;
      this.$tabList = $('<nav/>', {
        'class': 'm-tabs__nav'
      });
      $.each(this.$panels, function (i, panel) {
        var $panel = $(panel);
        var label = $panel.attr('data-label') || $panel.find('h2, h3, h4, h5, h6').eq(0).text() || 'No header found'; // Get ID of the panel or assign it one if it doesn't have one

        var id = $panel.attr('id');

        if (!id) {
          id = "tabs-".concat(Helper.RandomGuid());
          $panel.attr('id', id);
        }

        if (i === 0) {
          firstId = id;
        } // Initial panel ARIA states


        $panel.attr({
          'aria-labelledby': "".concat(id, "-tab"),
          'aria-hidden': 'true'
        }); // Create a link for the nav

        var $link = $('<a/>', {
          'class': 'm-tabs__tab',
          'href': "#".concat(id),
          'text': label,
          'id': "".concat(id, "-tab"),
          'aria-selected': 'false'
        }).on('click', function (e) {
          e.preventDefault();

          _this37.switchToTab(id);
        }); // Add the link to the list

        _this37.$tabList.append($link).append(' ');
      });
      this.$container.prepend(this.$tabList);
      this.switchToTab(firstId);
    }
  }, {
    key: "hideAllTabs",
    value: function hideAllTabs() {
      this.$panels.attr({
        'aria-hidden': 'true',
        'hidden': 'hidden'
      });
      this.$tabList.find('a').attr({
        'aria-selected': 'false'
      });
    }
  }, {
    key: "switchToTab",
    value: function switchToTab(id) {
      this.hideAllTabs();
      this.$container.find("#".concat(id)).attr('aria-hidden', 'false').removeAttr('hidden');
      this.$container.find("#".concat(id, "-tab")).attr('aria-selected', 'true'); // Move keyboard focus to the panel

      Helper.Focus.Move(this.$container.find("#tabpanel-".concat(id)));
    }
  }]);

  return Tabs;
}();

$(function () {
  $('.m-tabs').each(function (i, tabgroup) {
    new Tabs(tabgroup);
  });
});

var Toggle = /*#__PURE__*/function () {
  function Toggle(settings) {
    var _this38 = this;

    _classCallCheck(this, Toggle);

    // Create default settings
    var defaultSettings = {
      switch: '',
      condition: function condition() {},
      events: 'change',
      toggle: false,
      on: function on() {},
      off: function off() {}
    }; // Merge objects

    this.settings = $.extend(true, {}, defaultSettings, settings); // If either of the required things are missing, back out now

    if (!this.settings.switch || !this.settings.condition) {
      return;
    } // Initial stuff


    this.$switch = $(this.settings.switch);
    this.condition = this.settings.condition;
    this.$target = false; // will only be set if needed
    // Set up some things

    this.setupA11y();
    this.setupDeselectEvent();
    this.bindControls(); // Run when code and DOM is loaded

    $(function () {
      _this38.checkState();
    });
  }

  _createClass(Toggle, [{
    key: "setupA11y",
    value: function setupA11y() {
      var _this39 = this;

      if (this.settings.toggle) {
        this.$target = $(this.settings.toggle); // Get the ID(s), or set new one(s) if necessary

        this.$target.each(function (i, elem) {
          var targetId = $(elem).attr('id') || "toggle-".concat(Helper.RandomGuid());
          $(elem).attr({
            'id': targetId,
            'aria-controlledby': _this39.getAllIDs(_this39.$switch)
          });
        });
        this.$switch.attr('aria-controls', this.getAllIDs(this.$target));
      }
    }
  }, {
    key: "setupDeselectEvent",
    value: function setupDeselectEvent() {
      // This allows us to track when radio buttons become deselected
      // by assigning change events to other radios in the same group
      var selected = {}; // Don't run this if the switch isn't a radio button

      if (this.$switch.is(':not([type="radio"])')) {
        return;
      } // Don't run this if the deselect event is already bound


      if (this.$switch.data('deselectEventBound')) {
        return;
      } // Get the name of the radio button group and add the
      // deselect event to all radios in the group


      $("[name=\"".concat(this.$switch.attr('name'), "\"]")).on('change.deselect', function () {
        if (this.name in selected && this != selected[this.name]) {
          $(selected[this.name]).trigger('deselect');
        }

        selected[this.name] = this;
      }).data('deselectEventBound', true).filter(':checked').each(function () {
        selected[this.name] = this;
      });
    }
  }, {
    key: "bindControls",
    value: function bindControls() {
      var _this40 = this;

      this.$switch.on(this.settings.events, function () {
        _this40.checkState();
      });
    }
  }, {
    key: "checkState",
    value: function checkState() {
      if (this.condition()) {
        if (this.$target) {
          this.$switch.attr('aria-expanded', 'true');
          this.$target.removeAttr('hidden');
        }

        this.settings.on(this);
      } else {
        if (this.$target) {
          this.$switch.attr('aria-expanded', 'false');
          this.$target.attr('hidden', 'hidden');
        }

        this.settings.off(this);
      }
    }
  }, {
    key: "getAllIDs",
    value: function getAllIDs($selector) {
      var resultString = [];
      $selector.each(function (i, elem) {
        var id = $(elem).attr('id') || "toggle-".concat(Helper.RandomGuid());
        $(elem).attr('id', id);
        resultString.push(id);
      });
      return resultString.join(' ');
    }
  }]);

  return Toggle;
}();

var Tooltip = /*#__PURE__*/function () {
  function Tooltip($module) {
    _classCallCheck(this, Tooltip);

    this.$module = $module;
    this.$trigger = $module.firstElementChild;
    this.$tooltip = $module.querySelector(".u-tooltip__tip");
    this.timeoutId = null;
    this.timeoutLength = 0; // milliseconds

    this.tooltipOriginalId = this.$tooltip.id;
    this.tooltipId = this.tooltipOriginalId || "tooltip-".concat(Helper.RandomGuid()); // There's no tooltip, exit

    if (!this.$trigger || !this.$tooltip) {
      return;
    }

    this.create();
  }

  _createClass(Tooltip, [{
    key: "create",
    value: function create() {
      // Tooltip a11y
      this.$tooltip.setAttribute("id", this.tooltipId);
      this.$tooltip.setAttribute("aria-hidden", "true"); // Trigger events

      this.$trigger.boundMouseEnter = this.onFocus.bind(this);
      this.$trigger.boundMouseLeave = this.onMouseLeave.bind(this);
      this.$trigger.boundFocus = this.onFocus.bind(this);
      this.$trigger.boundBlur = this.onBlur.bind(this);
      this.$trigger.boundEscape = this.onEscape.bind(this);
      this.$trigger.addEventListener("mouseenter", this.$trigger.boundMouseEnter, true);
      this.$trigger.addEventListener("mouseleave", this.$trigger.boundMouseLeave, true);
      this.$trigger.addEventListener("focus", this.$trigger.boundFocus, true);
      this.$trigger.addEventListener("blur", this.$trigger.boundBlur, true);
      this.$trigger.addEventListener("keydown", this.$trigger.boundEscape, true);
      this.hideTooltip();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.tooltipOriginalId) {
        this.$tooltip.setAttribute("id", this.tooltipOriginalId);
      } else {
        this.$tooltip.removeAttribute("id");
      }

      this.$tooltip.removeAttribute("aria-hidden");
      this.$trigger.removeEventListener("mouseenter", this.$trigger.boundMouseEnter, true);
      this.$trigger.removeEventListener("mouseleave", this.$trigger.boundMouseLeave, true);
      this.$trigger.removeEventListener("focus", this.$trigger.boundFocus, true);
      this.$trigger.removeEventListener("blur", this.$trigger.boundBlur, true);
      this.$trigger.removeEventListener("keydown", this.$trigger.boundEscape, true);
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      this.showTooltip();
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      this.hideTooltip();
    }
  }, {
    key: "onEscape",
    value: function onEscape(e) {
      var code = e.which || e.keyCode;

      if (code === 27) {
        // 27 = ESCAPE
        this.hideTooltip();
      }
    }
  }, {
    key: "onMouseEnter",
    value: function onMouseEnter() {
      this.showTooltip();

      if (this.timeoutId) {
        clearTimeout(this.timeoutId);
      }
    }
  }, {
    key: "onMouseLeave",
    value: function onMouseLeave() {
      var _this41 = this;

      this.timeoutId = setTimeout(function () {
        _this41.hideTooltip();
      }, this.timeoutLength);
    }
  }, {
    key: "showTooltip",
    value: function showTooltip() {
      this.determinePosition();
      this.$tooltip.classList.remove("u-tooltip__tip--hidden");
      this.$tooltip.setAttribute("aria-hidden", "false");
    }
  }, {
    key: "hideTooltip",
    value: function hideTooltip() {
      this.$tooltip.classList.add("u-tooltip__tip--hidden");
      this.$tooltip.setAttribute("aria-hidden", "true");
    }
  }, {
    key: "determinePosition",
    value: function determinePosition() {
      // Calculate element positions
      var rect = this.$trigger.getBoundingClientRect();
      var spaceAvailable = {
        top: rect.top,
        left: rect.left,
        right: window.innerWidth - rect.right,
        bottom: window.innerHeight - rect.bottom
      }; // Iterate though the results to find where we have the most space

      var largestVal = 0;
      var largestKey = null;
      Object.keys(spaceAvailable).map(function (key) {
        if (spaceAvailable[key] > largestVal) {
          largestVal = spaceAvailable[key];
          largestKey = key;
        }
      });
      this.$tooltip.dataset.side = largestKey || "bottom";
    }
  }]);

  return Tooltip;
}();

$(function () {
  $('.u-tooltip').each(function (i, tooltip) {
    new Tooltip(tooltip);
  });
});

var UI = /*#__PURE__*/function () {
  function UI() {
    _classCallCheck(this, UI);
  }

  _createClass(UI, null, [{
    key: "FitVids",
    value: function FitVids() {
      $('.a-youtube-video').parent().fitVids();
    }
  }, {
    key: "ResponsiveTables",
    value: function ResponsiveTables() {
      var $tableArray = $('table:not([class])').each(function (i, table) {
        var $table = $(table); // If no wrapping div, add it

        if ($table.parent('.a-table').length === 0) {
          $table.wrap('<div class="a-table"></div>');
          $table.addClass('a-table__table');
        } // If there are th in the body, add another class for that


        if ($table.find('tbody th').length > 0) {
          $table.parent('.a-table').addClass('a-table--two-axis');
        } // If a header row is set up properly, make the table responsive


        if ($table.find('thead').length > 0) {
          $table.basictable({
            forceResponsive: false,
            noResize: true
          });
        }
      });
    }
  }]);

  return UI;
}();

$(function () {
  UI.FitVids();
  UI.ResponsiveTables();
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
